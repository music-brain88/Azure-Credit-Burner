// リポジトリ分析用の質問カテゴリと質問文を管理するモジュール
use std::collections::HashMap;
use anyhow::{Result, anyhow};

// カテゴリごとの質問を定義
type QuestionMap = HashMap<String, Vec<String>>;

// 質問マップを初期化
fn init_questions() -> QuestionMap {
    let mut questions = HashMap::new();
    
    // アーキテクチャに関する質問
    questions.insert(
        "architecture".to_string(), 
        vec![
            "このリポジトリのアーキテクチャについて詳細に分析してください。主要なコンポーネントとその関係性、設計パターン、アーキテクチャの強みと弱みについて議論してください。".to_string(),
            "このプロジェクトのアーキテクチャスタイル（マイクロサービス、モノリス、イベント駆動など）について分析してください。なぜこのスタイルが選ばれたと思いますか？別のアーキテクチャスタイルの方が適している可能性はありますか？".to_string(),
            "このシステムのスケーラビリティに関するアーキテクチャ上の考慮点を分析してください。将来の拡張や変更に対してどのように設計されていますか？".to_string(),
        ]
    );
    
    // パフォーマンスに関する質問
    questions.insert(
        "performance".to_string(), 
        vec![
            "このリポジトリのコードでパフォーマンスに影響する可能性のある部分を特定し、改善策を提案してください。特にボトルネックになりそうな処理や最適化できる部分に焦点を当ててください。".to_string(),
            "このシステムのリソース使用状況（CPU、メモリ、I/Oなど）について分析してください。効率的にリソースを使用していますか？最適化の余地はありますか？".to_string(),
            "このコードベースのデータ処理パターンを分析してください。大量のデータを扱う場合のパフォーマンス特性はどうでしょうか？".to_string(),
        ]
    );
    
    // セキュリティに関する質問
    questions.insert(
        "security".to_string(), 
        vec![
            "このリポジトリのコードにおける潜在的なセキュリティ脆弱性を特定し、それらのリスクレベルと対応策について議論してください。".to_string(),
            "このシステムの認証と認可のメカニズムについて評価してください。セキュリティのベストプラクティスに従っていますか？改善の余地はありますか？".to_string(),
            "このコードベースでデータの検証と入力サニタイズはどのように行われていますか？潜在的な脆弱性や改善点はありますか？".to_string(),
        ]
    );
    
    // テスト品質に関する質問
    questions.insert(
        "testing".to_string(), 
        vec![
            "このリポジトリのテスト戦略と品質保証の仕組みを分析してください。テストカバレッジ、テストの種類、自動化の程度はどうでしょうか？改善点はありますか？".to_string(),
            "このプロジェクトの単体テスト、統合テスト、エンドツーエンドテストのアプローチについて評価してください。テストピラミッドのバランスは適切ですか？".to_string(),
            "このコードベースのエラーハンドリングとエッジケースの処理を分析してください。例外処理とバリデーションは十分に行われていますか？".to_string(),
        ]
    );
    
    // ドメイン分析に関する質問
    questions.insert(
        "domain".to_string(), 
        vec![
            "このリポジトリが解決しようとしているドメイン問題について詳細に分析してください。ドメインモデルの設計とビジネスロジックの表現方法は適切でしょうか？".to_string(),
            "このプロジェクトのドメイン駆動設計の原則の適用状況を評価してください。境界づけられたコンテキスト、エンティティ、値オブジェクトなどの概念はどのように表現されていますか？".to_string(),
            "このコードベースのビジネスルールとドメインロジックのカプセル化方法を分析してください。ドメインの変更に対してどの程度柔軟に対応できますか？".to_string(),
        ]
    );
    
    // 分散システムに関する質問
    questions.insert(
        "distributed".to_string(), 
        vec![
            "このリポジトリが分散システムとして動作する場合、その特性と課題について分析してください。ネットワーク障害、レイテンシ、データ一貫性などにどう対応していますか？".to_string(),
            "このプロジェクトにおける非同期処理とメッセージパッシングのパターンを評価してください。分散システムのベストプラクティスに従っていますか？".to_string(),
            "このコードベースのCAP定理（一貫性、可用性、分断耐性）におけるトレードオフを分析してください。システム設計でどのような選択がされていますか？".to_string(),
        ]
    );
    
    // コード保守性に関する質問
    questions.insert(
        "maintainability".to_string(), 
        vec![
            "このリポジトリのコード保守性と読みやすさを評価してください。命名規則、コメント、関数の長さ、複雑性などの面で改善点はありますか？".to_string(),
            "このプロジェクトのコード構造と依存関係の管理を分析してください。依存性注入、モジュール化、関心の分離などの原則はどの程度適用されていますか？".to_string(),
            "このコードベースの技術的負債と将来のリファクタリングの機会を特定してください。コードの品質を向上させるための具体的な提案はありますか？".to_string(),
        ]
    );
    
    questions
}

// 特定のカテゴリから質問を取得する
pub fn get_question(category: &str, index: usize) -> Result<String> {
    let questions = init_questions();
    
    // カテゴリが存在するか確認
    if let Some(category_questions) = questions.get(category) {
        // インデックスが範囲内かチェック
        let actual_index = index % category_questions.len();
        
        // 質問を返す
        Ok(category_questions[actual_index].clone())
    } else {
        Err(anyhow!("カテゴリ '{}' は定義されていません", category))
    }
}

// カテゴリの日本語名を取得
pub fn get_category_japanese(category_en: &str) -> String {
    match category_en {
        "architecture" => "アーキテクチャ",
        "performance" => "パフォーマンス",
        "security" => "セキュリティ",
        "testing" => "テスト品質",
        "domain" => "ドメイン分析",
        "distributed" => "分散システム",
        "maintainability" => "コード保守性",
        _ => "不明なカテゴリ",
    }
    .to_string()
}
